<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>de1ux</title>
    <atom:link href="http://localhost:8080/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://localhost:8080</link>
    <description>Learning how to blog in 2018</description>
    <pubDate>Thu, 18 Jan 2018 22:00:00 -0700</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Kubernetes client-go: Updating and rolling back a deployment</title>
      <link>http://localhost:8080/articles/kubernetes-go-creating-updating-rolling-back/</link>
      <pubDate>Thu, 18 Jan 2018 22:00:00 -0700</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/kubernetes-go-creating-updating-rolling-back/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;warning&quot;&gt;WARNING&lt;/h3&gt;
&lt;p&gt;All of this was written during version 6.0 of the Kubernetes client. The information here may be out of date: ymmv&lt;/p&gt;
&lt;h3 id=&quot;picking-the-right-kubernetes-client-version&quot;&gt;Picking the right Kubernetes client version&lt;/h3&gt;
&lt;p&gt;Kubernetes provides an excellent &lt;a href=&quot;https://github.com/kubernetes/client-go/tree/v6.0.0#compatibility-matrix&quot;&gt;compatibility matrix&lt;/a&gt; to help target the right client version for communicating with the cluster.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Don’t&lt;/em&gt;&lt;/strong&gt; worry about picking a minor version higher than your current Kubernetes API minor version; I targeted two versions ahead of the API server and all tested out well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do&lt;/em&gt;&lt;/strong&gt; worry if you plan on exercising non-core/alpha client features that your cluster might not support.&lt;/p&gt;
&lt;h3 id=&quot;installing-k8s-io-client-go&quot;&gt;Installing k8s.io/client-go&lt;/h3&gt;
&lt;p&gt;Currently, the client does not play well with &lt;a href=&quot;https://github.com/golang/dep&quot;&gt;dep&lt;/a&gt;, but the authors have done a great writeup about the &lt;a href=&quot;https://github.com/kubernetes/client-go/blob/master/INSTALL.md&quot;&gt;install options currently available&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here’s a quick and dirty build script ganked from their INSTALL.md:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;go get -v github.com/tools/godep

go get -v k8s.io/client-go/...
&lt;span class=&quot;built_in&quot;&gt;pushd&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$GOPATH&lt;/span&gt;/src/k8s.io/client-go
git checkout v6.0.0
godep restore ./...
&lt;span class=&quot;built_in&quot;&gt;popd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;create-a-kubernetes-clientset&quot;&gt;Create a Kubernetes clientset&lt;/h3&gt;
&lt;p&gt;It’s likely you have a &lt;code&gt;$HOME/.kube/config&lt;/code&gt; already from playing with &lt;code&gt;kubectl&lt;/code&gt; and minikube, making it trivial to generate a client (or as Kubernetes calls it, a &lt;code&gt;clientset&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;config, err := clientcmd.BuildConfigFromFlags(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, filepath.Join(homedir.HomeDir(), &lt;span class=&quot;string&quot;&gt;&quot;.kube&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;config&quot;&lt;/span&gt;))
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {
    &lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt;(err)
}

clientSet, err := kubernetes.NewForConfig(config)
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {
    &lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt;(err)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;getting-an-existing-deployment&quot;&gt;Getting an existing deployment&lt;/h3&gt;
&lt;p&gt;Before we start a new deployment, we first need to assert that an existing deployment is running and in a good state.&lt;/p&gt;
&lt;p&gt;Here is a YAML of redis I’ve been toying around with in &lt;code&gt;kubectl&lt;/code&gt; that will provide the initial containers.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-yaml&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;apps/v1beta2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# for versions before 1.8.0 use apps/v1beta1&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;redis&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;    matchLabels:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;      app:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;redis&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;  replicas:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# tells deployment to run 2 pods matching the template&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;  template:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# create pods using pod definition in this template&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;    metadata:&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;# unlike pod-nginx.yaml, the name is not included in the meta data as a unique name is&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;# generated from the deployment name&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;      labels:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;        app:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;redis&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;    spec:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;      containers:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;      - name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;redis&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;        image:&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;redis:3&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;        ports:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;        - containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ kubectl create -f deployments/redis.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we’ll use Go to verify the redis deployment exists and all replicas are in a &lt;code&gt;running&lt;/code&gt; state.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;dClient := clientSet.ExtensionsV1beta1().Deployments(&lt;span class=&quot;string&quot;&gt;&quot;default&quot;&lt;/span&gt;)

&lt;span class=&quot;comment&quot;&gt;// Get a copy of the current deployment&lt;/span&gt;
originalDeployment, err := dClient.Get(&lt;span class=&quot;string&quot;&gt;&quot;redis&quot;&lt;/span&gt;, metav1.GetOptions{})
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {
    &lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt;(err)
}

&lt;span class=&quot;comment&quot;&gt;// Verify the current containers in the pod are running&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; allRunning, err := podContainersRunning(clientSet, &lt;span class=&quot;string&quot;&gt;&quot;redis&quot;&lt;/span&gt;); !(allRunning &amp;amp;&amp;amp; err == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;) {
    &lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt;(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;Not all containers are currently running, or err: %s&quot;&lt;/span&gt;, err))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we’ve asserted the existing redis deploy is running and available, we now know that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;any issues during our deploy are likely caused by us, and not the existing containers&lt;/li&gt;
&lt;li&gt;there is a succesful deploy to rollback to&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;updating-a-deployment&quot;&gt;Updating a deployment&lt;/h3&gt;
&lt;p&gt;Updating a deployment is as easy as updating the fields we’re interested in and resubmitting it to the cluster. The redis tag is intentionally incorrect to simulate an unhealthy deploy.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;dClient := client.ExtensionsV1beta1().Deployments(&lt;span class=&quot;string&quot;&gt;&quot;default&quot;&lt;/span&gt;)

retryErr := retry.RetryOnConflict(retry.DefaultRetry, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
    &lt;span class=&quot;comment&quot;&gt;// Assumes you've already deployed redis before to the cluster&lt;/span&gt;
    result, getErr := dClient.Get(&lt;span class=&quot;string&quot;&gt;&quot;redis&quot;&lt;/span&gt;, metav1.GetOptions{})
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; getErr != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {
        &lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt;(fmt.Errorf(&lt;span class=&quot;string&quot;&gt;&quot;Failed to get latest version of redis: %s&quot;&lt;/span&gt;, getErr))
    }

    result.Spec.Template.Spec.Containers[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].Image = &lt;span class=&quot;string&quot;&gt;&quot;redis:doesntexist&quot;&lt;/span&gt;
    _, updateErr := dClient.Update(result)
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; updateErr
})

&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; retryErr != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {
    &lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt;(retryErr)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Every deployment object returned from client-go includes a resource version indicating the version that cluster has seen. If the redis deployment is updated during &lt;em&gt;our&lt;/em&gt; attempt to update the same redis deployment, the server will reject us because our resource versions conflict.&lt;/p&gt;
&lt;p&gt;Thankfully, client-go provides a &lt;code&gt;RetryOnConflict&lt;/code&gt; utility that debounces conflict errors. On each retry of the deployment, we get a fresh copy of the cluster’s current redis deployment and apply our deployment operation over top of it.&lt;/p&gt;
&lt;p&gt;From the examples for &lt;code&gt;RetryOnConflict&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//    You have two options to Update() this Deployment:
//
//    1. Modify the &amp;quot;deployment&amp;quot; variable and call: Update(deployment).
//       This works like the &amp;quot;kubectl replace&amp;quot; command and it overwrites/loses changes
//       made by other clients between you Create() and Update() the object.
//    2. Modify the &amp;quot;result&amp;quot; returned by Get() and retry Update(result) until
//       you no longer get a conflict error. This way, you can preserve changes made
//       by other clients between Create() and Update(). This is implemented below
//           using the retry utility package included with client-go. (RECOMMENDED)
//
// More Info:
// https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#concurrency-control-and-consistency
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Thinking of deploys as operations on top of deployment objects naturally leads to abstracting the &lt;em&gt;contents&lt;/em&gt; of the operation away from the &lt;em&gt;act&lt;/em&gt; of deploying.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := deploy(dClient, &lt;span class=&quot;string&quot;&gt;&quot;redis&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(deployment *apiv1.Deployment)&lt;/span&gt;&lt;/span&gt; {
    deployment.Spec.Template.Spec.Containers[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].Image = &lt;span class=&quot;string&quot;&gt;&quot;redis:doesntexist&quot;&lt;/span&gt;
}); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {
    &lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt;(err)
}

err = waitForPodContainersRunning(clientSet, &lt;span class=&quot;string&quot;&gt;&quot;redis&quot;&lt;/span&gt;)
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {
    &lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Deploy successful&quot;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(dClient v1.DeploymentInterface, app &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, op &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;(deployment *apiv1.Deployment)&lt;/span&gt;) &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; retry.RetryOnConflict(retry.DefaultRetry, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
        result, err := dClient.Get(app, metav1.GetOptions{})
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {
            &lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt;(fmt.Errorf(&lt;span class=&quot;string&quot;&gt;&quot;Failed to get latest version of %s: %s&quot;&lt;/span&gt;, app, err))
        }

        op(result)

        _, updateErr := dClient.Update(result)
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; updateErr
    })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;rolling-back-a-deployment&quot;&gt;Rolling back a deployment&lt;/h3&gt;
&lt;p&gt;If a deployment fails, rolling back the operation requires reversing the fields modified during the deployment operation and resubmitting the deploy.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Try rolling back&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := deploy(dClient, &lt;span class=&quot;string&quot;&gt;&quot;redis&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(deployment *apiv1.Deployment)&lt;/span&gt;&lt;/span&gt; {
    deployment.Spec.Template.Spec.Containers[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].Image = originalDeployment.Spec.Template.Spec.Containers[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].Image
}); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {
    &lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt;(err)
}

err = waitForPodContainersRunning(clientSet, &lt;span class=&quot;string&quot;&gt;&quot;redis&quot;&lt;/span&gt;)
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; {
    &lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt;(err)
}
&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Rolled back successfully!&quot;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;notes&quot;&gt;Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/de1ux/kubernetes_exercises/blob/master/exercises/deploy.go&quot;&gt;Exercise code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes/client-go/tree/v6.0.0/examples&quot;&gt;Client-go examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
  </channel>
</rss>